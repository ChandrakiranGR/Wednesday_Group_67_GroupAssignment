package model.ProductManagement;

// This class extracts summary data from the product
public class ProductSummary {
    private Product subjectProduct;
    private int numberOfSalesAboveTarget;
    private int numberOfSalesBelowTarget;
    private int productPricePerformance; // total profit above target (could be negative too)
    private int actualSalesVolume;
    private int rank; // will be implemented later
    private int totalRevenue; // tracks total revenue generated by the product

    public ProductSummary(Product p) {
        this.subjectProduct = p;
        this.numberOfSalesAboveTarget = p.getNumberOfProductSalesAboveTarget();
        this.numberOfSalesBelowTarget = p.getNumberOfProductSalesBelowTarget();
        this.productPricePerformance = p.getOrderPricePerformance();
        this.actualSalesVolume = p.getSalesVolume();
        this.totalRevenue = calculateTotalRevenue(p);
    }

    // Calculate total revenue based on sales volume and target price
    private int calculateTotalRevenue(Product p) {
        return p.getSalesVolume() * p.getTargetPrice();
    }

    public int getSalesRevenues() {
        return totalRevenue;
    }

    public int getNumberAboveTarget() {
        return numberOfSalesAboveTarget;
    }

    public int getProductPricePerformance() {
        return productPricePerformance;
    }

    public int getNumberBelowTarget() {
        return numberOfSalesBelowTarget;
    }

    public boolean isProductAlwaysAboveTarget() {
        return numberOfSalesBelowTarget == 0;
    }

    public Product getSubjectProduct() {
        return subjectProduct;
    }

    // Update performance metrics for the product
    public void updatePerformance(double actualPrice, double targetPrice) {
        if (actualPrice < targetPrice) {
            numberOfSalesBelowTarget++;
        } else {
            numberOfSalesAboveTarget++;
        }
        productPricePerformance += actualPrice - targetPrice;
    }

    // Generate a summary report for this product
    public String generateProductSummaryReport() {
        return String.format("Product: %s%n" +
                             "Revenue: %d%n" +
                             "Sales Above Target: %d%n" +
                             "Sales Below Target: %d%n" +
                             "Price Performance: %d%n",
                             subjectProduct.getName(),
                             totalRevenue,
                             numberOfSalesAboveTarget,
                             numberOfSalesBelowTarget,
                             productPricePerformance);
    }
}
